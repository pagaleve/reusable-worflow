name: Reusable_Workflow

on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: environment to deploy
        required: true
      context:
        type: string
        description: context to get organization secrets
        required: true
      updateReadme:
        type: boolean
        description: a boolean to determine if this service doc should be updated on readme
        required: true

jobs:
  deploy:
    environment: ${{ inputs.environment }}
    name: deploy-${{ inputs.environment }}
    runs-on: ubuntu-latest
    env:
      STAGE: ${{ inputs.environment }}
      CONTEXT_ENV: ${{ inputs.context }}
      NODE_VERSION: 14.x
      GPR_AUTH_TOKEN: ${{ secrets.GPR_AUTH_TOKEN }}
      SENTRY_DSN_URL: ${{ secrets.SENTRY_DSN_URL }}
      SENTRY_TRACES_SAMPLE_RATE: ${{ secrets.SENTRY_TRACES_SAMPLE_RATE }}

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_PAGALEVESOURCE_MANAGE_REPO }}
          fetch-depth: 0

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Authenticate with GitHub package registry
        run: |
          echo "@pagaleve:registry=https://npm.pkg.github.com" > ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ env.GPR_AUTH_TOKEN }}" >> ~/.npmrc
          echo "registry=https://registry.npmjs.com" >> ~/.npmrc

      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-

      - uses: pnpm/action-setup@v2.1.0
        with:
          version: 6.29.2

      - name: Install NPM Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm run build

      - name: Unit Test ${{ inputs.environment }}
        if: ${{ inputs.environment != 'prod'  }}
        run: pnpm run test:unit
        env:
          AWS_REGION: ${{ secrets.DEV_AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}

      - name: Unit Test prod
        if: ${{ inputs.environment == 'prod'  }}
        run: pnpm run test:unit
        env:
          AWS_REGION: ${{ secrets.PROD_AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}

      - name: Generating coverage badges
        if: ${{ github.ref == 'refs/heads/main' && inputs.environment == 'stage' }}
        uses: jpb06/jest-badges-action@latest
        env:
          HUSKY: 0
          tag: "--no-verify"
        with:
          branches: main

      - name: Deploy ${{ inputs.environment }}
        if: ${{ inputs.environment != 'prod'  }}
        run: pnpm run deploy -- ${{ inputs.environment }}
        env:
          AWS_REGION: ${{ secrets.DEV_AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          ACCOUNT_ID: ${{ secrets.DEV_ACCOUNT_ID }}

      - name: Deploy prod
        if: ${{ inputs.environment == 'prod' }}
        run: pnpm run deploy -- prod
        env:
          AWS_REGION: ${{ secrets.PROD_AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          ACCOUNT_ID: ${{ secrets.PROD_ACCOUNT_ID }}

      - name: Apply migrations ${{ inputs.environment }}
        if: ${{ inputs.environment != 'prod'  }}
        run: pnpm run migration -- ${{ inputs.environment }}
        env:
          AWS_REGION: ${{ secrets.DEV_AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}

      - name: Apply migrations prod
        if: ${{ inputs.environment == 'prod' }}
        run: pnpm run migration -- ${{ inputs.environment }}
        env:
          AWS_REGION: ${{ secrets.PROD_AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}

      - name: Integration Test
        if: ${{ inputs.environment != 'prod' }}
        run: pnpm run test:e2e
        env:
          AWS_REGION: ${{ secrets.DEV_AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}

      - name: Generate documentation
        run: pnpm run gen-doc
        env:
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update readme
        if: ${{ inputs.updateReadme == true }}
        uses: readmeio/rdme@7.0.1
        with:
          rdme: openapi ./swagger-doc.json --key=${{secrets.README_API_KEY}} --id=${{secrets.README_API_DEFINITION_ID}}

      - name: Release
        if: ${{ inputs.environment == 'stage' }}
        env:
          GH_TOKEN: ${{ secrets.PAT_PAGALEVESOURCE_MANAGE_REPO }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: HUSKY=0 npx semantic-release

  check_shared_modified:
    needs: deploy
    if: ${{ inputs.environment == 'stage' }}
    name: check files on shared folder
    env:
      NODE_VERSION: 14.x
    outputs:
      shared_folder_modified: ${{ steps.check_modified_files.outputs.modified }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v24

      - name: List all changed files
        id: check_modified_files
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ $file != **/shared/* ]]; then
              echo "::set-output name=modified::false"
              continue
            else
              echo "::set-output name=modified::true"
              break
            fi
          done

  publish-gpr:
    needs: check_shared_modified
    if: needs.check_shared_modified.outputs.shared_folder_modified == 'true'
    env:
      NODE_VERSION: 14.x
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: https://npm.pkg.github.com/
          scope: "@pagaleve"

      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-

      - uses: pnpm/action-setup@v2.1.0
        with:
          version: 6.29.2

      - name: Install NPM Dependencies
        run: pnpm install --frozen-lockfile

      - name: publish
        env:
          GH_TOKEN: ${{ secrets.PAT_PAGALEVESOURCE_MANAGE_REPO }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: pnpm publish
