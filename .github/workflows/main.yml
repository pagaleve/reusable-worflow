name: Reusable_Workflow

on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: environment to deploy
        required: true
      context:
        type: string
        description: context to get organization secrets
        required: true
      updateReadme:
        type: boolean
        description: a boolean to determine if this service doc should be updated on readme
        required: true
      applyMigration:
        type: boolean
        description: a boolean to determine if migration step should be invoked
        required: true
      shouldRelease:
        type: boolean
        description: a boolean to determine if release step should be invoked
        required: false
        default: true
      generateCoverageBadges:
        type: boolean
        description: a boolean to determine if generate coverage badges should be invoked
        required: false
        default: true
      nodeVersion:
        type: string
        description: nodejs version as default 14.x
        required: false
        default: 14.x

jobs:
  deploy:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    env:
      STAGE: ${{ inputs.environment }}
      CONTEXT_ENV: ${{ inputs.context }}
      NODE_VERSION: ${{ inputs.nodeVersion }}
      GPR_AUTH_TOKEN: ${{ secrets.PAT_PAGALEVESOURCE_PACKAGE_READ }}
      SENTRY_DSN_URL: ${{ secrets.SENTRY_DSN_URL }}
      SENTRY_TRACES_SAMPLE_RATE: ${{ secrets.SENTRY_TRACES_SAMPLE_RATE }}
      KANASTRA_ORIGINATOR_ID: ${{ secrets.KANASTRA_ORIGINATOR_ID }}
      KANASTRA_URL: ${{ secrets.KANASTRA_URL }}
      KANASTRA_API_CLIENT_ID: ${{ secrets.KANASTRA_API_CLIENT_ID }}
      KANASTRA_API_CLIENT_SECRET: ${{ secrets.KANASTRA_API_CLIENT_SECRET }}
      AWS_REGION: ${{ inputs.environment == 'prod' && secrets.PROD_AWS_REGION || secrets.DEV_AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ inputs.environment == 'prod' && secrets.PROD_AWS_ACCESS_KEY_ID || secrets.DEV_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ inputs.environment == 'prod' && secrets.PROD_AWS_SECRET_ACCESS_KEY || secrets.DEV_AWS_SECRET_ACCESS_KEY}}
      ACCOUNT_ID: ${{ inputs.environment == 'prod' && secrets.PROD_ACCOUNT_ID || secrets.DEV_ACCOUNT_ID}}

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_PAGALEVESOURCE_PACKAGE_WRITE }}
          fetch-depth: 0

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Authenticate with GitHub package registry
        run: |
          echo "@pagaleve:registry=https://npm.pkg.github.com" > ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ env.GPR_AUTH_TOKEN }}" >> ~/.npmrc
          echo "registry=https://registry.npmjs.com" >> ~/.npmrc
      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-
      - uses: pnpm/action-setup@v2.1.0
        with:
          version: 6.29.2

      - name: Install NPM Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm run build

      - name: Unit Test ${{ inputs.environment }}
        run: pnpm run test:unit

#       - name: Generating coverage badges
#         if: ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && inputs.environment == 'stage' && inputs.generateCoverageBadges == true }}
#         uses: jpb06/jest-badges-action@latest
#         env:
#           HUSKY: 0
#           tag: "--no-verify"
#         with:
#           branches: main, master

      - name: Deploy ${{ inputs.environment }}
        run: pnpm run deploy -- ${{ inputs.environment }}

      - name: Apply migrations ${{ inputs.environment }}
        if: ${{ inputs.applyMigration == true }}
        run: pnpm run migration -- ${{ inputs.environment }}

      - name: Integration Test
        if: ${{ inputs.environment != 'prod' }}
        run: pnpm run test:e2e

      - name: Generate documentation
        if: ${{ inputs.updateReadme == true }}
        run: pnpm run gen-doc
        env:
          NPM_TOKEN: ${{ secrets.PAT_PAGALEVESOURCE_PACKAGE_WRITE }}

      - name: Update readme
        if: ${{ inputs.updateReadme == true }}
        uses: readmeio/rdme@7.0.1
        with:
          rdme: openapi ./swagger-doc.json --key=${{secrets.README_API_KEY}} --id=${{secrets.README_API_DEFINITION_ID}}

      - name: Release
        if: ${{ inputs.environment == 'stage' && inputs.shouldRelease == true }}
        env:
          GH_TOKEN: ${{ secrets.PAT_PAGALEVESOURCE_MANAGE_REPO }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: pnpm run release
